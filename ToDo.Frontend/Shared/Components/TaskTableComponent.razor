@using System
@using System.Collections.Generic
@using System.Threading
@using System.Threading.Tasks
@using MudBlazor
@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudTable T="TaskItemLookupDto"
          @ref="_table"
          ServerData="ServerData"
          Dense="true"
          Hover="false"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent"
          Loading="false"
          RowsPerPage="10"
          Elevation="0"
          Bordered="false"
          OnRowMouseEnter="OnRowMouseEnter"
          OnRowMouseLeave="OnRowMouseLeave"
          Breakpoint="Breakpoint.Sm">

    <HeaderContent>
        <MudTh>
            <MudStack Row="true" Style="width: 100%;">
                <MudTableSortLabel T="TaskItemLookupDto" SortLabel="Status">Статус</MudTableSortLabel>
                <MudSpacer />
                <MudTableSortLabel T="TaskItemLookupDto" SortLabel="Title">Задача</MudTableSortLabel>
                <MudSpacer />

            </MudStack>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="TaskItemLookupDto" SortLabel="Priority">Приоритет</MudTableSortLabel>
        </MudTh>
        <MudTh Style="width:4rem;"></MudTh>
    </HeaderContent>
    <ColGroup>
        <col style="width: 80%" />
        <col />
        <col />

    </ColGroup>

    <RowTemplate Context="task">
        <!-- ПК-версия (табличная) -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudTd DataLabel="Задача">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <CheckUndoButtonComponent IsCheck="task.Status == UserTaskStatus.Done"
                                              OnCheck="() => OnComplete.InvokeAsync(task.Id)"
                                              OnUndo="() => OnReopen.InvokeAsync(task.Id)" />
                    <TaskTitleComponent Title="@task.Title"
                                        SubTitle="@(task.IsAllDay ? "Весь день" : task.StartDate.LocalDateTime.ToString("HH:mm"))"
                                        IsComplete="task.Status == UserTaskStatus.Done" />
                </MudStack>
            </MudTd>

            <MudTd DataLabel="Приоритет">
                <MudChip T="string"
                         Color="@task.Priority.GetPriorityMudColor()"
                         Size="Size.Small"
                         Variant="Variant.Text">
                    @task.Priority
                </MudChip>
            </MudTd>

            <MudTd>
                @if (_currenHoverRowTaskId.HasValue && _currenHoverRowTaskId == task.Id)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                   Color="Color.Default"
                                   Size="Size.Small"
                                   OnClick="() => OnDelete.InvokeAsync(task.Id)" />
                }
            </MudTd>
        </MudHidden>

        <!--Мобильная карточка -->
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudTd Class="p-0">
                <MudPaper Class="pa-2" Elevation="1" Style="width: 100%;">
                    <MudStack Spacing="2" Row="true" Justify="Justify.SpaceBetween">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <CheckUndoButtonComponent IsCheck="task.Status == UserTaskStatus.Done"
                                                      OnCheck="() => OnComplete.InvokeAsync(task.Id)"
                                                      OnUndo="() => OnReopen.InvokeAsync(task.Id)" />
                            <TaskTitleComponent Title="@task.Title"
                                                SubTitle="@(task.IsAllDay ? "Весь день" : task.StartDate.LocalDateTime.ToString("HH:mm"))"
                                                IsComplete="task.Status == UserTaskStatus.Done" />
                        </MudStack>

                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.caption">
                                <MudChip T="string"
                                         Color="@task.Priority.GetPriorityMudColor()"
                                         Size="Size.Small"
                                         Variant="Variant.Text">
                                    @task.Priority
                                </MudChip>
                            </MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudTd>
        </MudHidden>
    </RowTemplate>

    <PagerContent>
        @if (!HidePagination)
        {
            <MudTablePager HideRowsPerPage="true"
                           HorizontalAlignment="HorizontalAlignment.Center" />
        }
    </PagerContent>
</MudTable>

@code {
    private MudTable<TaskItemLookupDto>? _table;
    private Guid? _currenHoverRowTaskId = null;

    [Parameter] public bool HidePagination { get; set; } = false;
    [Parameter] public Func<TableState, CancellationToken, Task<TableData<TaskItemLookupDto>>>? ServerData { get; set; }
    [Parameter] public bool ShowActionsColumn { get; set; } = false;
    [Parameter] public EventCallback<Guid> OnComplete { get; set; }
    [Parameter] public EventCallback<Guid> OnReopen { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }

    [Inject] private NavigationManager Nav { get; set; } = default!;

    /// <summary>Перезагрузить данные в таблице</summary>
    public Task ReloadServerDataAsync() =>
        _table is not null
            ? _table.ReloadServerData()
            : Task.CompletedTask;

    private void RowClickEvent(TableRowClickEventArgs<TaskItemLookupDto> args)
    {
        Nav.NavigateTo($"/tasks/form/{args.Item.Id}");
    }
    private void OnRowMouseEnter(TableRowHoverEventArgs<TaskItemLookupDto> args)
    {
        _currenHoverRowTaskId = args.Item?.Id;

    }
    private void OnRowMouseLeave(TableRowHoverEventArgs<TaskItemLookupDto> args)
    {
        _currenHoverRowTaskId = null;
    }
}
