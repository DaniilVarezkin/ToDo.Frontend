@using ToDo.Frontend.Pages.TaskItems
@using Microsoft.AspNetCore.Mvc
@using MudBlazor
@using ToDo.Frontend.Common.Exceptions
@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@inject ITaskItemsService TaskItemsService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        @ContentText
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">

        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudTextField T="string"
                              @bind-Value="_viewModel.Title"
                              Label="Заголовок"
                              Required="true"
                              RequiredError="Обязательное поле"
                              Variant="Variant.Outlined"
                              Counter="250"
                              MaxLength="250"
                              Immediate="true"
                              Style="width:100%;" />
            </MudItem>



            <MudItem xs="12" >
                <MudCheckBox T="bool"
                             Color="Color.Primary"
                             Label="Весь день" 
                             ValueChanged="OnIsAllDayChanged"
                             Value="_viewModel.IsAllDay"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDateRangePicker
                    @bind-DateRange="_viewModel.DateRange"
                    Label="Период"
                    Variant="Variant.Outlined"
                    Required="true"
                    RequiredError="Укажите даты"
                    Style="width:100%;" />
            </MudItem>

            @if (!_viewModel.IsAllDay)
            {
                <!-- Время начала / окончания -->
                <MudItem xs="12" sm="3">
                    <MudTimePicker T="TimeSpan?"
                                   @bind-Time="_viewModel.StartTime"
                                   Label="Время начала"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="Укажите время начала"
                                   Style="width:100%;" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTimePicker T="TimeSpan?"
                                   @bind-Time="_viewModel.EndTime"
                                   Label="Время окончания"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="Укажите время окончания"
                                   Style="width:100%;"
                                   ImmediateText="true"
                                   Validation="(TimeSpan? time) => _viewModel.ValidateEndTime(time)"/>
                </MudItem>

                <MudItem xs="12" Class="mx-3 mb-2">
                    <MudText Typo="Typo.body2">
                        Длительность: @(_viewModel.DurationLabel == "0" ? "Мгновенно" :_viewModel.DurationLabel)
                    </MudText>
                    <MudSlider T="int"
                        Size="Size.Medium"
                               @bind-Value="_viewModel.DurationBlocks"
                               Min="0" Max="16" Step="1"
                               TickMarks="true"
                               TickMarkLabels="@_viewModel.DurationMarks"
                               Class="mt-1" />
                </MudItem>
            }
            <MudFlexBreak />
            <MudItem xs="12" sm="4">
                <MudSelect T="UserTaskStatus"
                           @bind-Value="_viewModel.Status"
                           Label="Статус"
                           Variant="Variant.Outlined"
                           Style="width:100%;">
                    @foreach (var s in Enum.GetValues<UserTaskStatus>())
                    {
                        <MudSelectItem Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudSelect T="TaskPriority"
                           @bind-Value="_viewModel.Priority"
                           Label="Приоритет"
                           Variant="Variant.Outlined"
                           Style="width:100%;">
                    @foreach (var p in Enum.GetValues<TaskPriority>())
                    {
                        <MudSelectItem Value="@p">@p</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

                        <!-- Описание -->
            <MudItem xs="12">
                <MudTextField T="string"
                              @bind-Value="_viewModel.Description"
                              Label="Описание"
                              Variant="Variant.Outlined"
                              Lines="3"
                              Immediate="true"
                              MaxLength="1000"
                              Counter="1000"
                              Style="width:100%;" />
            </MudItem>

            <!-- Кнопки -->
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@Submit">
                        @(Id.HasValue ? "Сохранить" : "Создать")
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               OnClick='Cancel'>
                        Отмена
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string ContentText { get; set; }

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public Color Color { get; set; }

    //Параметры для задачи

    [Parameter]
    public Func<Task> OnSubmit { get; set; }

    [Parameter] public Guid? Id { get; set; }

    private MudForm _form = null!;
    private TaskFormViewModel _viewModel = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // Редактирование
            var dto = await TaskItemsService.GetAsync(Id.Value);
            if (dto == null)
            {
                Snackbar.Add("Задача не найдена", Severity.Error);
                Cancel();
                return;
            }
            _viewModel = new TaskFormViewModel(dto);
        }
        else
        {
            _viewModel.StartDate      = DateTime.Today;
            _viewModel.StartTime      = TimeSpan.FromHours(9);
            _viewModel.DurationBlocks = 4; // 1 час

            // Вычисляем конец задачи, чтобы EndDate/EndTime были не null
            var start = _viewModel.StartDate.Value.Date + _viewModel.StartTime.Value;
            var end   = start.AddMinutes(_viewModel.DurationBlocks * 15);
            _viewModel.EndDate = end.Date;
            _viewModel.EndTime = end.TimeOfDay;
        }

        // И только теперь безопасно создаём DateRange
        if (_viewModel.StartDate.HasValue && _viewModel.EndDate.HasValue)
            _viewModel.DateRange = new DateRange(
                _viewModel.StartDate.Value,
                _viewModel.EndDate.Value
            );
    }

    private void Submit() {
        if(true)
        {
            OnSubmit();
            MudDialog.Close(DialogResult.Ok(true));
        }
        
    }

    private void Cancel() => MudDialog.Cancel();


        private void OnIsAllDayChanged(bool value)
    {
         _viewModel.IsAllDay = value;
    }


}