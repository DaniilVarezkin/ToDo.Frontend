@using ToDo.Shared.Dto.TaskItems
@inject NavigationManager Nav

<td class="calendar-cell @CeilClassCss" @onclick='NavigateToDayTasksPage'>
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.body2">
            @Date.Day
        </MudText>
        @if (Tasks.Any())
        {
            <MudChip T="int" Size="Size.Small" Color="Color.Default" Variant="Variant.Text">
                @Tasks.Count
            </MudChip>
        }
    </MudStack>

    @foreach (var task in Tasks.Take(MaxTaskCount))
    {
        <TaskChipComponent TaskItem="task" />
    }

    @if (Tasks.Count > MaxTaskCount)
    {
        <MudChip T="string" Size="Size.Small" Color="Color.Default" Variant="Variant.Text">
            +@((Tasks.Count - MaxTaskCount)) more
        </MudChip>
    }    
</td>

@code {
    [Parameter] public DateTimeOffset DateOffset { get; set; }
    [Parameter] public IList<TaskItemLookupDto> Tasks { get; set; } = Array.Empty<TaskItemLookupDto>();
    [Parameter] public DateTime CurrentMonth { get; set; }
    [Parameter] public int MaxTaskCount { get; set; } = 3;
    private DateTime Date => DateOffset.DateTime;
    private bool InMonth => Date.Month == CurrentMonth.Month;
    private bool IsToday => Date.Date == DateTime.Today;

    private string CeilClassCss => (InMonth ? "" : "out-month ") + (IsToday ? "today-cell" : "");

    private void NavigateToDayTasksPage() {
        Nav.NavigateTo($"/tasks/day/{Date.ToString("yyyy-MM-dd")}");
    }
}