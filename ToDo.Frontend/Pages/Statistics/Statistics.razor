@page "/statistics"
@attribute [Authorize]
@using ToDo.Frontend.Services.Statistic
@using ToDo.Shared.Dto.Statistics
@using MudBlazor
@inject IStatisticService StatisticService
@inject ISnackbar Snackbar


<MudPaper Class="pa-4 mb-4 mud-elevation-2" >
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudCard Class="pa-4 d-flex flex-column align-center">
                <MudText Typo="Typo.h6">Всего задач</MudText>
                <MudText Typo="Typo.h3">@_global.TotalCount</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudCard Class="pa-4 d-flex flex-column align-center">
                <MudText Typo="Typo.h6">Среднее время выполнения (ч)</MudText>
                <MudText Typo="Typo.h3">@_global.AvgCompletionTimeHours.ToString("F1")</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudCard Class="pa-4 d-flex flex-column align-center">
                <MudText Typo="Typo.h6">Всего просрочено</MudText>
                <MudText Typo="Typo.h3">@_global.OverdueCount</MudText>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudGrid Spacing="3">
    <MudItem xs="6">
        <!-- Donut Chart -->
        <MudPaper Class="pa-4 mb-4 mud-elevation-2 d-flex justify-center">
            <MudStack>
                <MudText Typo="Typo.h6" Class="mt-4 mb-2 text-center">Распределение задач по статусам</MudText>
                <MudChart ChartType="ChartType.Donut"
                          Width="300px"
                          Height="300px"
                          InputData="@_statusData"
                          InputLabels="@_statusLabels">
                    <CustomGraphics>
                        <text x="50%" y="42%" dominant-baseline="middle" text-anchor="middle" font-size="18">По статусам</text>
                        <text x="50%" y="58%" dominant-baseline="middle" text-anchor="middle" font-size="28">@_statusData.Sum()</text>
                    </CustomGraphics>
                </MudChart>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <!-- Status Bar Chart -->
        <MudPaper Class="pa-4 mb-4 mud-elevation-2 d-flex justify-center">
            <MudStack>
                <MudText Typo="Typo.h6" Class="mt-4 mb-2 text-center">Текущее распределение задач по статусам</MudText>
                <MudChart ChartType="ChartType.StackedBar"
                          ChartSeries="@_statusSeries"
                          XAxisLabels="@_statusLabels"
                          Width="100%"
                          Height="300px" />
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <!-- Daily Bar Chart -->
        <MudPaper Class="pa-4 mb-4 mud-elevation-2 d-flex justify-center">
            <MudStack>
                <MudText Typo="Typo.h6" Class="mt-4 mb-2 text-center">Ежедневная статистика: создано, завершено, просрочено</MudText>
                <MudChart ChartType="ChartType.StackedBar"
                          ChartSeries="@_dailyBarSeries"
                          XAxisLabels="@_dailyLabels"
                          Width="100%"
                          Height="350px" />
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <!-- Time Series Chart -->
        <MudPaper Class="pa-4 mud-elevation-2 d-flex justify-center">
            <MudStack>
                <MudText Typo="Typo.h6" Class="mt-4 mb-2 text-center">Тренды по метрикам во времени</MudText>
                <MudTimeSeriesChart ChartSeries="@_trendSeries"
                                    Width="100%"
                                    Height="350px"
                                    TimeLabelFormat="M"
                                    TimeLabelSpacing="TimeSpan.FromDays(1)"
                                    TimeLabelSpacingRounding="true"
                                    TimeLabelSpacingRoundingPadSeries="true"
                                    AxisChartOptions="@_timeAxisOptions"
                                    CanHideSeries="true"
                                    DataMarkerTooltipTimeLabelFormat="yyyy-MM-dd"
                                    ChartOptions="@timeSeriesChartOptions" />
            </MudStack>
        </MudPaper>
    </MudItem>



</MudGrid>

@code {
    private GlobalTaskStatisticsVm _global = new();
    private double[] _statusData = Array.Empty<double>();
    private string[] _statusLabels = Array.Empty<string>();
    private List<ChartSeries> _statusSeries = new();

    private List<ChartSeries> _dailyBarSeries = new();
    private string[] _dailyLabels = Array.Empty<string>();

    private List<TimeSeriesChartSeries> _trendSeries = new();
    private ChartOptions timeSeriesChartOptions = new ChartOptions { YAxisTicks = 10 };

    // Настройки осей для TimeSeries
    private AxisChartOptions _timeAxisOptions = new() { XAxisLabelRotation = 45, MatchBoundsToSize = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _global = await StatisticService.GetGlobalAsync();
            BuildStatusCharts();

            var historyVm = await StatisticService.GetStatusHistoryAsync(days: 14);
            BuildDailyBars(historyVm);
            BuildTrends(historyVm);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке статистики: {ex.Message}", Severity.Error);
        }
    }

    private void BuildStatusCharts()
    {
        _statusLabels = _global.ByStatus.Keys.Select(k => k.ToString()).ToArray();
        _statusData = _global.ByStatus.Values.Select(v => (double)v).ToArray();
        _statusSeries = new List<ChartSeries> { new ChartSeries { Name = "Количество", Data = _statusData } };
    }

    private void BuildDailyBars(TaskStatusHistoryVm vm)
    {
        _dailyLabels = vm.CreatedHistory.OrderBy(x => x.Day).Select(x => x.Day.ToString("MM-dd")).ToArray();
        var created = vm.CreatedHistory.OrderBy(x => x.Day).Select(x => (double)x.Count).ToArray();
        var completed = vm.CompletedHistory.OrderBy(x => x.Day).Select(x => (double)x.Count).ToArray();
        var overdue = vm.OverdueHistory.OrderBy(x => x.Day).Select(x => (double)x.Count).ToArray();

        _dailyBarSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Создано", Data = created },
            new ChartSeries { Name = "Завершено", Data = completed },
            new ChartSeries { Name = "Просрочено", Data = overdue }
        };
    }

    private void BuildTrends(TaskStatusHistoryVm vm)
    {
        var created = vm.CreatedHistory.OrderBy(x => x.Day)
            .Select(x => new TimeSeriesChartSeries.TimeValue(x.Day.DateTime, x.Count)).ToList();
        var completed = vm.CompletedHistory.OrderBy(x => x.Day)
            .Select(x => new TimeSeriesChartSeries.TimeValue(x.Day.DateTime, x.Count)).ToList();
        var overdue = vm.OverdueHistory.OrderBy(x => x.Day)
            .Select(x => new TimeSeriesChartSeries.TimeValue(x.Day.DateTime, x.Count)).ToList();


        var createdMax =  created.Select(i => i.Value).Max();
        var completedMax = completed.Select(i => i.Value).Max();
        var overdueMax = overdue.Select(i => i.Value).Max();
        timeSeriesChartOptions.YAxisTicks = (int)(new[] { createdMax, completedMax, overdueMax }.Max()) * 2;

        _trendSeries = new List<TimeSeriesChartSeries>
        {
            new TimeSeriesChartSeries { Name = "Создано", Data = created, IsVisible = true, LineDisplayType = LineDisplayType.Line },
            new TimeSeriesChartSeries { Name = "Завершено", Data = completed, IsVisible = true, LineDisplayType = LineDisplayType.Line },
            new TimeSeriesChartSeries { Name = "Просрочено", Data = overdue, IsVisible = true, LineDisplayType = LineDisplayType.Line }
        };
    }
}
