@page "/tasks/create"
@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@inject ITaskItemsService TaskItemsService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudForm @ref="_form">
        <MudStack Spacing="3">

            <!-- Заголовок и описание -->
            <MudTextField T="string"
                          @bind-Value="_model.Title"
                          Label="Заголовок"
                          Required="true"
                          RequiredError="Заголовок обязателен"
                          MaxLength="250" />

            <MudTextField T="string"
                          @bind-Value="_model.Description"
                          Label="Описание"
                          MaxLength="1000"
                          Lines="3" />

            <!-- Весь день -->
            <MudSwitch T="bool"
                       @bind-Value="_model.IsAllDay"
                       Label="На весь день" />

            <!-- Дата/время начала -->
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudDatePicker T="DateTime?"
                               @bind-Date="_startDate"
                               Label="Дата начала"
                               Required="true"
                               RequiredError="Укажите дату начала" />
                <MudTimePicker T="TimeSpan?"
                               @bind-Time="_startTime"
                               Label="Время начала"
                               Required="true"
                               RequiredError="Укажите время начала" />
            </MudStack>

            <!-- Слайдер длительности -->
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.caption">Длительность (ч):</MudText>
                <MudSlider T="int"
                           @bind-Value="DurationHours"
                           Min="0" Max="8" Step="1"
                           Marks="@_durationMarks"
                           Class="flex-grow-1" />
                <MudText Typo="Typo.subtitle2" Class="ml-2">@($"{DurationHours} ч")</MudText>
            </MudStack>

            <!-- Дата/время окончания -->
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudDatePicker T="DateTime?"
                               @bind-Date="_endDate"
                               Label="Дата окончания"
                               Required="true"
                               RequiredError="Укажите дату окончания" />
                <MudTimePicker T="TimeSpan?"
                               @bind-Time="_endTime"
                               Label="Время окончания"
                               Required="true"
                               RequiredError="Укажите время окончания" />
            </MudStack>

            <!-- Цвет, статус, приоритет -->
            <MudTextField T="string"
                          @bind-Value="_model.Color"
                          Label="Цвет (HEX или имя)"
                          MaxLength="20" />

            <MudSelect T="UserTaskStatus"
                       @bind-Value="_model.Status"
                       Label="Статус">
                @foreach (UserTaskStatus status in Enum.GetValues(typeof(UserTaskStatus)))
                {
                    <MudSelectItem T="UserTaskStatus" Value="@status">@status</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="TaskPriority"
                       @bind-Value="_model.Priority"
                       Label="Приоритет">
                @foreach (TaskPriority pri in Enum.GetValues(typeof(TaskPriority)))
                {
                    <MudSelectItem T="TaskPriority" Value="@pri">@pri</MudSelectItem>
                }
            </MudSelect>

            <!-- Кнопки -->
            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="@SubmitAsync">
                    Создать
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                           OnClick='() => Nav.NavigateTo("/tasks")'>
                    Отмена
                </MudButton>
            </MudStack>

        </MudStack>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form = null!;
    private CreateTaskItemDto _model = new()
    {
        Color = "#2196F3",
        Status = UserTaskStatus.Todo,
        Priority = TaskPriority.Medium
    };

    private DateTime? _startDate = DateTime.Today;
    private TimeSpan? _startTime = TimeSpan.FromHours(9);
    private DateTime? _endDate;
    private TimeSpan? _endTime;

    private Dictionary<int, string> _durationMarks = new()
    {
        { 0, "0" },
        { 1, "1ч" },
        { 2, "2ч" },
        { 3, "3ч" },
        { 4, "4ч" },
        { 5, "5ч" },
        { 6, "6ч" },
        { 7, "7ч" },
        { 8, "8ч" }
    };

    private int _durationHours;
    public int DurationHours
    {
        get => _durationHours;
        set
        {
            if (_durationHours == value) return;
            _durationHours = value;
            UpdateEndByDuration();
        }
    }

    protected override void OnInitialized()
    {
        DurationHours = 1;
    }

    private void UpdateEndByDuration()
    {
        if (_startDate.HasValue && _startTime.HasValue)
        {
            var start = _startDate.Value.Date + _startTime.Value;
            var end = start.AddHours(_durationHours);
            _endDate = end.Date;
            _endTime = end.TimeOfDay;
        }
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid)
            return;

        // Собираем локальные DateTime и переводим в UTC для DateTimeOffset
        var startLocal = _startDate!.Value.Date + _startTime!.Value;
        var endLocal = _endDate!.Value.Date + _endTime!.Value;
        var startUtc = DateTime.SpecifyKind(startLocal, DateTimeKind.Utc);
        var endUtc = DateTime.SpecifyKind(endLocal, DateTimeKind.Utc);

        _model.StartDate = new DateTimeOffset(startUtc);
        _model.EndDate = new DateTimeOffset(endUtc);

        try
        {
            var id = await TaskItemsService.CreateAsync(_model);
            Snackbar.Add("Задача успешно создана", Severity.Success);
            Nav.NavigateTo($"/tasks");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при создании: {ex.Message}", Severity.Error);
        }
    }
}
