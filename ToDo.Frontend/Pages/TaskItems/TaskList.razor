@page "/tasks"
@attribute [Authorize]

@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@using MudBlazor
@inject ITaskItemsService TaskItemsService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mb-4">
        <MudTabs ActivePanelIndex="_activeFilter"
                 ActivePanelIndexChanged="OnFilterChanged"
                 Rounded="true">
            <MudTabPanel Text="Сегодня" />
            <MudTabPanel Text="Все" />
        </MudTabs>
        <MudTextField T="string"
                      Value="_search"
                      ValueChanged="OnSearchChanged"
                      Immediate="true"
                      Placeholder="Поиск..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="ml-auto"/>
    </MudStack>

    <TaskTableComponent @ref="_taskTable"
                        ServerData="LoadServerData"
                        ShowActionsColumn="true"
                        OnComplete="CompleteTask"
                        OnReopen="ReopenTask"
                        HidePagination="_hidePagination" 
                        OnDelete="DeleteTask" />
</MudPaper>

@code {
    private TaskTableComponent? _taskTable;
    private int _activeFilter = 0;
    private string _search = string.Empty;
    private bool _hidePagination = true;

    private async Task OnFilterChanged(int index)
    {
        _activeFilter = index;
        if (_taskTable is not null)
            await _taskTable.ReloadServerDataAsync();
    }

    private async Task OnSearchChanged(string value)
    {
        _search = value;
        if (_taskTable is not null)
            await _taskTable.ReloadServerDataAsync();
    }

    private async Task<TableData<TaskItemLookupDto>> LoadServerData(TableState state, CancellationToken ct)
    {

        // await Task.Delay(100000);
        DateTimeOffset? dateFrom = null;
        DateTimeOffset? dateTo = null;
        if (_activeFilter == 0)
        {
            var utcToday = DateTime.UtcNow.Date;
            dateFrom = new DateTimeOffset(utcToday, TimeSpan.Zero);
            dateTo = new DateTimeOffset(utcToday.AddDays(1).AddTicks(-1), TimeSpan.Zero);
        }

        var query = new GetTaskItemListQueryDto
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            DateFrom = dateFrom,
            DateTo = dateTo,
            Search = _search,
            SortBy = state.SortLabel?.ToLowerInvariant(),
            SortDescending = state.SortDirection == SortDirection.Descending
        };

        try
        {
            var result = await TaskItemsService.GetAllAsync(query);
            _hidePagination = result.TotalCount < 10;
            return new TableData<TaskItemLookupDto>
            {
                TotalItems = result.TotalCount,
                Items = result.Items ?? Array.Empty<TaskItemLookupDto>()
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке: {ex.Message}", Severity.Error);
            return new TableData<TaskItemLookupDto>();
        }
    }

    private async Task CompleteTask(Guid id)
    {
        try
        {
            await TaskItemsService.CompleteAsync(id);
            Snackbar.Add("Задача выполнена", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка завершения: {ex.Message}", Severity.Error);
        }
    }

    private async Task ReopenTask(Guid id)
    {
        try
        {
            await TaskItemsService.ReopenAsync(id);
            Snackbar.Add("Задача возвращена в Todo", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка открытия: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteTask(Guid id)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Подтверждение удаления",
            "Вы уверены, что хотите удалить эту задачу?",
            yesText: "Да", cancelText: "Отмена");
        if (confirmed == true)
        {
            try
            {
                await TaskItemsService.DeleteAsync(id);
                Snackbar.Add("Задача удалена", Severity.Success);
                if (_taskTable is not null)
                    await _taskTable.ReloadServerDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка удаления: {ex.Message}", Severity.Error);
            }
        }
    }
}

