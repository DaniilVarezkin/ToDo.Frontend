@page "/"
@page "/tasks"
@attribute [Authorize]

@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@using MudBlazor
@inject ITaskItemsService TaskItemsService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4" Style="position: relative;">
    <MudGrid Spacing="3">

        <!-- Таб фильтрации -->
        <MudItem xs="12" sm="4" >
            <MudTabs ActivePanelIndex="_activeFilter"
                     ActivePanelIndexChanged="OnFilterChanged"
                     Rounded="true"
                     Centered="true">
                     
                <MudTabPanel Text="Сегодня" />
                <MudTabPanel Text="Все" />
            </MudTabs>
        </MudItem>

        <!-- Поиск -->
        <MudItem xs="12" sm="4">
            <MudTextField T="string"
                          Value="_search"
                          ValueChanged="OnSearchChanged"
                          Immediate="true"
                          Placeholder="Поиск..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Variant="Variant.Text"
                          Class="w-100" />
        </MudItem>

        <!-- Таблица задач -->
        <MudItem xs="12">
            <TaskTableComponent @ref="_taskTable"
                                ServerData="LoadServerData"
                                ShowActionsColumn="true"
                                OnComplete="CompleteTask"
                                OnReopen="ReopenTask"
                                HidePagination="_hidePagination"
                                OnDelete="DeleteTask" />
        </MudItem>

    </MudGrid>

    <AddFabButton OnClick='() => Nav.NavigateTo("/tasks/form")' />
</MudPaper>

@code {
    private TaskTableComponent? _taskTable;
    private int _activeFilter = 0;
    private string _search = string.Empty;
    private bool _hidePagination = true;

    private async Task OnFilterChanged(int index)
    {
        _activeFilter = index;
        if (_taskTable is not null)
            await _taskTable.ReloadServerDataAsync();
    }

    private async Task OnSearchChanged(string value)
    {
        _search = value;
        if (_taskTable is not null)
            await _taskTable.ReloadServerDataAsync();
    }

    private async Task<TableData<TaskItemLookupDto>> LoadServerData(TableState state, CancellationToken ct)
    {

        // await Task.Delay(100000);
        DateTimeOffset? dateFrom = null;
        DateTimeOffset? dateTo = null;
        if (_activeFilter == 0)
        {
            var localToday = DateTime.Today;                      // локальная дата
            var offset = TimeZoneInfo.Local.GetUtcOffset(localToday);
            dateFrom = new DateTimeOffset(localToday, offset);
            dateTo = new DateTimeOffset(localToday.AddDays(1).AddTicks(-1), offset);
        }

        var query = new GetTaskItemListQueryDto
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            DateFrom = dateFrom,
            DateTo = dateTo,
            Search = _search,
            SortBy = state.SortLabel?.ToLowerInvariant(),
            SortDescending = state.SortDirection == SortDirection.Descending
        };

        try
        {
            var result = await TaskItemsService.GetAllAsync(query);
            _hidePagination = result.TotalCount < 10;
            return new TableData<TaskItemLookupDto>
            {
                TotalItems = result.TotalCount,
                Items = result.Items ?? Array.Empty<TaskItemLookupDto>()
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке: {ex.Message}", Severity.Error);
            return new TableData<TaskItemLookupDto>();
        }
    }

    private async Task CompleteTask(Guid id)
    {
        try
        {
            await TaskItemsService.CompleteAsync(id);
            Snackbar.Add("Задача выполнена", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка завершения: {ex.Message}", Severity.Error);
        }
    }

    private async Task ReopenTask(Guid id)
    {
        try
        {
            await TaskItemsService.ReopenAsync(id);
            Snackbar.Add("Задача возвращена в Todo", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка открытия: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteTask(Guid id)
    {

        var parameters = new DialogParameters<DialogComponent>
        {
            { x => x.ContentText, "Вы действительно хотите удалить эту задачу? Этот процесс невозможно отменить." },
            { x => x.ButtonText, "Удалить" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DialogComponent>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await TaskItemsService.DeleteAsync(id);
                Snackbar.Add("Задача удалена", Severity.Success);
                if (_taskTable is not null)
                    await _taskTable.ReloadServerDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка удаления: {ex.Message}", Severity.Error);
            }
        }
    }
}

