@page "/tasks/day/{Date:datetime}"
@attribute [Authorize]

@using ToDo.Shared.Dto.TaskItems
@using ToDo.Shared.Enums
@using MudBlazor
@inject ITaskItemsService TaskItemsService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary"
                       OnClick='() => Nav.NavigateTo("/tasks/calendar")' />
        <MudText Typo="Typo.h5">@Date.ToLocalTime().ToString("D")</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick='() => Nav.NavigateTo($"/tasks/form/date/{Date:yyyy-MM-dd}")'>
            Добавить задачу
        </MudButton>
    </MudStack>

    <TaskTableComponent @ref="_taskTable"
                        ServerData="LoadServerData"
                        ShowActionsColumn="true"
                        OnDelete="DeleteTask"
                        OnComplete="CompleteTask"
                        OnReopen="ReopenTask"
                        HidePagination="true" />
</MudPaper>

@code {
    [Parameter]
    public DateTime Date { get; set; }

    private TaskTableComponent? _taskTable;
    private bool _loading = false;

    /// <summary>Обработчик загрузки данных для таблицы задач</summary>
    private async Task<TableData<TaskItemLookupDto>> LoadServerData(TableState state, CancellationToken ct)
    {
        _loading = true;
        var startLocal = Date.Date;
        var start = new DateTimeOffset(startLocal, TimeSpan.Zero);
        var end = new DateTimeOffset(startLocal.AddDays(1).AddTicks(-1), TimeSpan.Zero);

        var query = new GetTaskItemListQueryDto
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            DateFrom = start,
            DateTo = end,
            Search = null,
            SortBy = state.SortLabel?.ToLowerInvariant() ?? nameof(TaskItemLookupDto.StartDate).ToLowerInvariant(),
            SortDescending = state.SortDirection == SortDirection.Descending
        };

        try
        {
            var result = await TaskItemsService.GetAllAsync(query);
            return new TableData<TaskItemLookupDto>
            {
                TotalItems = result.TotalCount,
                Items = result.Items ?? Array.Empty<TaskItemLookupDto>()
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке: {ex.Message}", Severity.Error);
            return new TableData<TaskItemLookupDto>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CompleteTask(Guid id)
    {
        try
        {
            await TaskItemsService.CompleteAsync(id);
            Snackbar.Add("Задача выполнена", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка завершения: {ex.Message}", Severity.Error);
        }
    }

    private async Task ReopenTask(Guid id)
    {
        try
        {
            await TaskItemsService.ReopenAsync(id);
            Snackbar.Add("Задача возвращена в Todo", Severity.Success);
            if (_taskTable is not null)
                await _taskTable.ReloadServerDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка открытия: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteTask(Guid id)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Подтверждение удаления",
            "Вы уверены, что хотите удалить эту задачу?",
            yesText: "Да", cancelText: "Отмена");

        if (confirmed == true)
        {
            try
            {
                await TaskItemsService.DeleteAsync(id);
                Snackbar.Add("Задача удалена", Severity.Success);
                if (_taskTable is not null)
                    await _taskTable.ReloadServerDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ошибка удаления: {ex.Message}", Severity.Error);
            }
        }
    }
}
