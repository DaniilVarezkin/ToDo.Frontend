@page "/login"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using ToDo.Frontend.Common.Exceptions

@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Class="pa-6 mt-8" Elevation="4">
            <MudText Typo="Typo.h5" Class="mb-4">Вход в систему</MudText>

            <MudForm @ref="form"
                     @bind-IsValid="isValid"
                     @bind-Errors="errors">

                <MudTextField T="string"
                              Label="Email"
                              For="@(() => model.Email)"
                              @bind-Value="model.Email"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Email"
                              Required="true"
                              RequiredError="Email обязателен"
                              Validation="@(new EmailAddressAttribute { ErrorMessage = "Неверный формат email" })"
                              Immediate="true"
                              Autocomplete="off" />

                <MudTextField T="string"
                              Label="Пароль"
                              For="@(() => model.Password)"
                              @bind-Value="model.Password"
                              Variant="Variant.Outlined"
                              InputType="@passwordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              AdornmentAriaLabel="Показать/скрыть пароль"
                              OnAdornmentClick="@TogglePasswordVisibility"
                              Required="true"
                              RequiredError="Пароль обязателен"
                              Autocomplete="new-password"
                              Class="mt-4" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-6"
                           Disabled="!isValid || loading"
                           OnClick="@OnSubmit">
                    @if (loading)
                    {
                        <MudProgressCircular Size="Size.Small" Class="mr-2" Indeterminate="true" />
                    }
                    Войти
                </MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;
    private bool isValid;
    private string[] errors = Array.Empty<string>();
    private bool loading;

    private readonly LoginModel model = new();

    // Переключатель видимости пароля
    private bool showPassword;
    private InputType passwordInput = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        if (showPassword)
        {
            passwordInput = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            passwordInput = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task OnSubmit()
    {
        await form.Validate();
        if (!isValid)
            return;

        loading = true;
        try
        {
            var token = await AuthService.LoginAsync(new LoginDto
            {
                Email = model.Email,
                Password = model.Password
            });
            ((CustomAuthStateProvider)AuthStateProvider).NotifyTokenChanged(token);
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка входа: {ex.Message}", Severity.Error);
        }
        loading = false;
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email обязателен")]
        [EmailAddress(ErrorMessage = "Неверный формат email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обязателен")]
        public string Password { get; set; } = string.Empty;
    }
}
